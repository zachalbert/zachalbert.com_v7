@mixin orbit($start) {
  $end: $start - 360;
  0%   { transform: rotateZ($start); }
  100% { transform: rotateZ($end); }
}

@keyframes orbit-mercury { @include orbit( planet( $solarSystem, mercury, start ) ); }
@keyframes orbit-venus   { @include orbit( planet( $solarSystem, venus, start ) ); }
@keyframes orbit-earth   { @include orbit( planet( $solarSystem, earth, start ) ); }
@keyframes orbit-mars    { @include orbit( planet( $solarSystem, mars, start ) ); }
@keyframes orbit-jupiter { @include orbit( planet( $solarSystem, jupiter, start ) ); }
@keyframes orbit-saturn  { @include orbit( planet( $solarSystem, saturn, start ) ); }
@keyframes orbit-uranus  { @include orbit( planet( $solarSystem, uranus, start ) ); }
@keyframes orbit-neptune { @include orbit( planet( $solarSystem, neptune, start ) ); }
@keyframes orbit-pluto   { @include orbit( planet( $solarSystem, pluto, start ) ); }


/* Counteracts the orbital rotation to keep the 2d planet always facing forward */

@mixin invert($start) {
  $end: $start - 360;
  0%   { transform: rotateX(-90deg) rotateY($start) rotateZ(0deg); }
  100% { transform: rotateX(-90deg) rotateY($end) rotateZ(0deg); }
}

@keyframes invert-mercury { @include invert( planet( $solarSystem, mercury, start ) ); }
@keyframes invert-venus   { @include invert( planet( $solarSystem, venus, start ) ); }
@keyframes invert-earth   { @include invert( planet( $solarSystem, earth, start ) ); }
@keyframes invert-mars    { @include invert( planet( $solarSystem, mars, start ) ); }
@keyframes invert-jupiter { @include invert( planet( $solarSystem, jupiter, start ) ); }
@keyframes invert-saturn  { @include invert( planet( $solarSystem, saturn, start ) ); }
@keyframes invert-uranus  { @include invert( planet( $solarSystem, uranus, start ) ); }
@keyframes invert-neptune { @include invert( planet( $solarSystem, neptune, start ) ); }
@keyframes invert-pluto   { @include invert( planet( $solarSystem, pluto, start ) ); }

.orbit {
  position: absolute;
  left: 50%;
  border-radius: 50%;
  border: $orbitBorder;
  background: none;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform-style: preserve-3d;
  backface-visibility: hidden;

  .pos {
    position: absolute;
    left: 50%;
    width: 1px;
    transform-style: preserve-3d;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
  }

  /* Cast shadows from planet */
  &:after {
    content: '';
    display: block;
    width: 20px;
    height: 20px;
    background: $planetCastShadowColor;
    position: relative;
    border-radius: 50%;
    left: 50%;
    margin-left: 0em;
    transform: translate3d(-0.5em,-50px,-42px)
  }
}
